<?php
/**
 * @file
 * Contains custom code for the Bne Resources module.
 */
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Controller\ControllerBase;
use Drupal\Core\Field\Plugin\Field\FieldWidget\OptionsButtonsWidget;
use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Logger\LoggerChannelFactoryInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Element\Select;
use Drupal\Core\Render\Element\Checkboxes;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use GuzzleHttp\Client;
use Symfony\Component\CssSelector\CssSelector;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\DomCrawler\Crawler;

/**
 * Implements hook_form_alter() for the 'resources' content type.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 * @param string $form_id
 *   The form ID.
 */
function bne_resources_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
      case 'node_resources_form':
      case 'node_resources_edit_form':
          // Attach AJAX behavior to the 'field_url_bdh' widget.
          $form['field_url_bdh']['widget'][0]['uri']['#ajax'] = [
              'callback' => 'bne_resources_url_ajax_callback',
              'event' => 'change',
              'progress' => [
                  'type' => 'throbber',
                  'message' => t('Scraping Database...'),
              ],
          ];

          // Attach AJAX behavior to the 'field_subject_resources' widget.
          $form['field_subject_resources']['widget']['#ajax'] = [
              'callback' => 'bne_resources_ajax_callback',
              'event' => 'change',
              'wrapper' => 'edit-field-subject-resources-wrapper',
          ];

          // Attach AJAX behavior to the 'field_resource_level' widget.
          $form['field_resource_level']['widget']['#ajax'] = [
              'callback' => 'bne_resources_level_ajax_callback',
              'event' => 'change',
              'wrapper' => 'edit-field-resource-level-wrapper',
          ];

          // Define the container IDs for 'field_basic_knowledge' and 'field_specific_competencies'.
          $form['field_basic_knowledge']['#prefix'] = '<div id="edit-field_basic_knowledge-wrapper">';
          $form['field_basic_knowledge']['#suffix'] = '</div>';
          $form['field_specific_competencies']['#prefix'] = '<div id="edit-field_specific_competencies-wrapper">';
          $form['field_specific_competencies']['#suffix'] = '</div>';

          // Attach the 'adminresources' library to the form.
          $form['#attached']['library'][] = 'bne_resources/adminresources';

           // Fetch the current value of 'field_subject_resources'.
           $current_subject_value = $form_state->getValue('field_subject_resources', []);
           if (empty($current_subject_value)) {
               // If there's no current value (e.g., on initial load), use the default value.
               $current_subject_value = isset($form['field_subject_resources']['widget']['#default_value']) ? (array) $form['field_subject_resources']['widget']['#default_value'] : [];
           }

           // Ensure the value is an array.
           if (!is_array($current_subject_value)) {
               $current_subject_value = [$current_subject_value];
           }

           // Update the options based on the current or default value.
           if (!empty($current_subject_value)) {
               $basic_knowledge_options = bne_resources_load_taxonomy_options($current_subject_value, 'basic_knowledge');
               $specific_competencies_options = bne_resources_load_taxonomy_options($current_subject_value, 'specific_competencies');
               $form['field_basic_knowledge']['widget']['#options'] = $basic_knowledge_options;
               $form['field_specific_competencies']['widget']['#options'] = $specific_competencies_options;
           }
           break;
  }
}



/**
 * AJAX Callback for updating form fields with scraped data from a URL.
 *
 * This function handles an AJAX request triggered when a URL is entered in a form
 * field. It attempts to scrape data from the provided URL and updates relevant
 * form fields with the scraped information. If an error occurs during scraping,
 * it logs the error message for debugging purposes.
 *
 * @param array $form
 *   The form structure.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param string $form_id
 *   The unique identifier for the form.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   An AJAX response object that may contain updated form fields or error messages.
 */
function bne_resources_url_ajax_callback(array &$form, FormStateInterface $form_state, $form_id) {
  $response = new AjaxResponse();

  // Log a message for debugging purposes.
  \Drupal::logger('resources')->notice('bne_resources_url_ajax_callback called');

  // Get the URL value from the form field.
  $url = $form_state->getValue('field_url_bdh')[0]['uri'];

  if (!empty($url)) {
    try {
      // Scrape data from the provided URL.
      $scrapped_data = bne_resources_scrape_url($url);

      // Invoke the 'resourcesUpdateData' JavaScript function to update form fields.
      $response->addCommand(new InvokeCommand(NULL, 'resourcesUpdateData', [$scrapped_data]));
    } catch (\Exception $e) {
      // Log the error in the log file.
      $logger = \Drupal::logger('resources');
      $logger->error('Error while performing scraping: @error_message', ['@error_message' => $e->getMessage()]);
    }
  }

  return $response;
}



function bne_resources_ajax_callback(array $form, FormStateInterface $form_state, Request $request) {
  $response = new AjaxResponse();
  

  // Antes de actualizar las opciones, guarda los valores seleccionados por el usuario.
  $current_basic_knowledge_values = $form_state->getValue('field_basic_knowledge');
  $current_specific_competencies_values = $form_state->getValue('field_specific_competencies');

  // Llama a la función para cargar opciones para field_basic_knowledge y field_specific_competencies.
  $options = bne_resources_load_taxonomy_options($form_state->getValue('field_subject_resources'), 'basic_knowledge');
  $options2 = bne_resources_load_taxonomy_options($form_state->getValue('field_subject_resources'), 'specific_competencies');

  // Asigna las opciones a los campos.
  $form['field_basic_knowledge']['widget']['#options'] = $options;
  $form['field_specific_competencies']['widget']['#options'] = $options2;

  // Después de actualizar las opciones, restablece los valores seleccionados por el usuario.
  $form_state->setValue('field_basic_knowledge', $current_basic_knowledge_values);
  $form_state->setValue('field_specific_competencies', $current_specific_competencies_values);

  // Procesa los elementos del formulario para adjuntar el JavaScript necesario.
  $class = get_class($form_state->getFormObject());
  \Drupal::formBuilder()->doBuildForm($form['#form_id'], $form, $form_state);

  // Return an AJAX response to update the field_basic_knowledge field.
  $response->addCommand(new ReplaceCommand(
    '#edit-field-basic-knowledge',
    $form['field_basic_knowledge']['widget']
  ));
  
  // Return an AJAX response to update the field_specific_competencies field.
  $response->addCommand(new ReplaceCommand(
    '#edit-field-specific-competencies',
    $form['field_specific_competencies']['widget']
  ));
  
  return $response;
  
}


/**
 * AJAX Callback to update the subject resources field based on the selected resource level.
 *
 * This function serves as an AJAX callback to dynamically update the options of
 * the 'field_subject_resources' field based on the selected value in the
 * 'field_resource_level' field. It retrieves the appropriate taxonomy terms
 * based on the selection and updates the form field accordingly.
 *
 * @param array &$form
 *   The form structure to be updated.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param \Symfony\Component\HttpFoundation\Request $request
 *   The HTTP request object.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   An AJAX response object containing updated form field options.
 */
function bne_resources_level_ajax_callback(array &$form, FormStateInterface $form_state, Request $request) {
  $response = new AjaxResponse();
  $vocabulary_machine_name = 'subject_resources';
  $options = [];

  // Get the taxonomy terms based on the previous selection.
  $term_id = bne_resources_getTaxonomyTerms($form_state->getValue('field_resource_level'), $vocabulary_machine_name);
  $terms = bne_resources_ChildrenOfTaxonomy($term_id, $vocabulary_machine_name);

  // Add the terms to the options with their respective IDs.
  foreach ($terms as $term) {
    $options[$term->id()] = $term->getName();
  }

  // Update the options of the 'field_subject_resources' field.
  $form['field_subject_resources']['widget']['#options'] = $options;
  
  // Update the content of the 'custom-field-subject-resources-container' container.
  $response->addCommand(new HtmlCommand('#custom-field-subject-resources-container', $form['field_subject_resources']['widget']));

  return $response;
}



/**
 * Retrieve child taxonomy terms of a given set of terms within a specified vocabulary.
 *
 * This function takes an array of taxonomy terms and a vocabulary machine name as
 * input and returns an array of child taxonomy terms. It checks the validity of
 * the input terms, finds the parent term (if any), and retrieves the child terms
 * associated with the input terms within the specified vocabulary.
 *
 * @param array $terms
 *   An array of taxonomy terms to find child terms for.
 * @param string $vocabulary_machine_name
 *   The machine name of the vocabulary in which to search for child terms.
 *
 * @return \Drupal\taxonomy\Entity\Term[]
 *   An array of child taxonomy terms.
 */
function bne_resources_ChildrenOfTaxonomy(array $terms, $vocabulary_machine_name) {
  $child_terms = [];

  // Verify that $terms is not empty and that all values are Term objects.
  $valid_terms = array_filter($terms, function ($term) {
    return $term instanceof \Drupal\taxonomy\Entity\Term;
  });

  if (!empty($valid_terms)) {
    // Separate terms into parents and children.
    foreach ($valid_terms as $term) {
      if (!$term->parent->isEmpty()) {
        $child_terms[$term->id()] = $term;
      }
    }

    // Retrieve additional child terms if necessary.
    if (!empty($child_terms)) {
      $taxonomy_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
      $query = $taxonomy_storage->getQuery()
        ->condition('vid', $vocabulary_machine_name)
        ->condition('parent', array_keys($child_terms), 'IN');
      $child_term_ids = $query->execute();
      $child_terms += $taxonomy_storage->loadMultiple($child_term_ids);
    }
  }

  // Sort child terms by ID.
  ksort($child_terms);
  return $child_terms;
}



/**
 * Retrieve taxonomy terms referencing a set of term IDs within a specified vocabulary.
 *
 * This function takes an array of term IDs and a vocabulary machine name as input
 * and returns an array of taxonomy terms that reference the input term IDs within
 * the specified vocabulary. It checks for the presence of term IDs, creates an
 * entity query to find referencing terms, and loads the referencing terms.
 *
 * @param array $term_ids
 *   An array of term IDs to find referencing terms for.
 * @param string $vocabulary_machine_name
 *   The machine name of the vocabulary in which to search for referencing terms.
 *
 * @return \Drupal\taxonomy\Entity\Term[]
 *   An array of taxonomy terms referencing the input term IDs.
 */
function bne_resources_getTaxonomyTerms(array $term_ids, $vocabulary_machine_name) {
  $referencing_terms = [];

  // Check if there are any term IDs provided.
  if (!empty($term_ids)) {
    // Get the taxonomy term storage.
    $taxonomy_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

    // Initialize an array to store referencing term IDs.
    $referencing_term_ids = [];

    // Iterate through the array of term IDs.
    foreach ($term_ids as $term_id) {
      // Create an entity query to find terms referencing each specified term.
      $query = $taxonomy_storage->getQuery()
        ->condition('vid', $vocabulary_machine_name)
        ->condition('field_ref', $term_id);

      // Execute the query and get the TIDs of referencing terms.
      $term_references = $query->execute();
      $referencing_term_ids = array_merge($referencing_term_ids, $term_references);
    }

    // Remove duplicate term IDs, if any.
    $referencing_term_ids = array_unique($referencing_term_ids);

    // Load the referencing terms.
    $referencing_terms = $taxonomy_storage->loadMultiple($referencing_term_ids);
  }

  return $referencing_terms;
}


  
/**
 * Function to load options for a taxonomy field.
 *
 * This function retrieves taxonomy terms related to the selected values and
 * loads them as options for the specified taxonomy field.
 *
 * @param array $selected_values
 *   An array of selected values.
 * @param string $taxonomy_name
 *   The name of the taxonomy vocabulary.
 *
 * @return array
 *   An associative array of options for the specified taxonomy field.
 */
function bne_resources_load_taxonomy_options(array $selected_values, $taxonomy_name) {
  $options = [];

  // Extract the selected TIDs into an array.
  $selected_tids = array_map(function ($value) {
    return $value['target_id'];
  }, $selected_values);

  // Query the specified taxonomy to find related terms.
  $query = \Drupal::entityQuery('taxonomy_term');
  $query->condition('vid', $taxonomy_name);
  $query->condition('field_subject_resources', $selected_tids, 'IN');
  $tids = $query->execute();
  // Check if there are related terms, and if so, load the options.
  if (!empty($tids)) {
    $term_ids = array_values($tids);
    $terms = \Drupal\taxonomy\Entity\Term::loadMultiple($term_ids);
    foreach ($terms as $term) {
      try {
        $term_tid = $term->id();
        if (is_numeric($term_tid)) {
          $title = $term->get('name')->value;
          $description = $term->get('description')->value;
          $children = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadChildren($term_tid);
          if (!empty($children)) {
            $title = '<span class="padre">' . htmlspecialchars($title) . '</span>';
          }else{
            $title = '<span class="hijo">' . htmlspecialchars($title) . '</span>';
          }
          $option_text = $title;
          if (!empty($description)) {
            $option_text .= '  ' . $description;
          }
          $options[$term_tid] = $option_text;
        }
      } catch (Exception $e) {
        \Drupal::logger('bne_resources')->error('An exception occurred: @message', ['@message' => $e->getMessage()]);
      }
    }
  }

  return $options;
}



/**
 * Scrapes data from a given URL.
 *
 * @param string $url
 *   The URL to scrape.
 *
 * @return array
 *   An array containing scraped data.
 */
function bne_resources_scrape_url($url) {
  // Create a new HTTP client.
  $client = new Client();
  
  // Send an HTTP GET request to the provided URL.
  $response = $client->get($url);
  
  // Get the response content.
  $content = $response->getBody()->getContents();
  
  // Create a new Crawler instance to parse the HTML content.
  $crawler = new Crawler($content);
  
  // Extract the title from the HTML using the Crawler.
  $title = $crawler->filter('.entrada h1.valor')->text();
  
  // Extract the document ID from the HTML and remove 'bdh' prefix.
  $doc_id = str_replace('bdh', '', $crawler->filter('.entrada span.rrr')->text());
  
  // Extract physical description from the HTML.
  $physical_description = $crawler->filterXpath("//div[@class='dato'][contains(text(), 'Descripción física')]/following-sibling::div[1]")->text('');
  
  // Extract description notes from the HTML.
  $description_notes = $crawler->filterXpath("//div[@class='dato'][contains(text(), 'Descripción y notas')]/following-sibling::div[1]")->text('');
  
  // Extract dates from the HTML and parse them.
  $fechas = $crawler->filterXpath("//div[@class='dato'][contains(text(), 'Fecha')]/following-sibling::div[1]")->text('');
  $dates = BNEgetFecha($fechas);
  
  // Generate URLs for small and big images.
  $small_image_id = "http://bdh-rd.bne.es/low.raw?id=$doc_id&name=00000001.jpg";
  $big_image_id = "http://bdh-rd.bne.es/pdf.raw?query=id:$doc_id&name=00000001.jpg&jpeg=true";
  
  // Generate a viewer URL.
  $viewer_url = "http://bdh-rd.bne.es/viewer.vm?id=bdh$doc_id&page=1";
  
  // Return an array containing the scraped data.
  return [
    'title' => $title,
    'small_image_id' => $small_image_id,
    'big_image_id' => $big_image_id,
    'viewer_url' => $viewer_url,
    'physical_description' => $physical_description,
    'description_notes' => $description_notes,
    'date_1' => $dates[0],
    'date_2' => $dates[1],
  ];
}

/**
 * Parses and extracts dates from the given text.
 *
 * This function processes text containing dates and extracts them for further use.
 *
 * @param string $text
 *   The text containing dates to be parsed.
 *
 * @return array
 *   An array containing the extracted dates.
 */
function BNEgetFecha($text) {
  // Remove unnecessary characters and whitespace from the text.
  if (strlen($text) > 0) {
    $text = str_replace("\t", "", $text);
    $text = str_replace("\r\n", "", $text);
    $text = str_replace("<br/>", "\n\r", $text);
    $text = str_replace("</div>", "", $text);
    $text = str_replace("  ", "", $text);
  }

  // Remove question marks from the text.
  $text = str_replace("?", "", $text);

  // Check if the text contains "entre" and "y" to split dates.
  if (strpos($text, "entre") !== false && strpos($text, "y") !== false) {
    $text = str_replace("entre", "", $text);
    $aFecha = explode("y", $text);
  } else {
    // If not, treat the entire text as a single date.
    $aFecha[0] = $text;
    $aFecha[1] = "";
  }

  // Return an array containing the extracted dates.
  return $aFecha;
}